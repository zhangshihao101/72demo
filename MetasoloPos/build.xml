<<<<<<< .mine
<?xml version="1.0" encoding="UTF-8"?>
<project name="MetasoloPos" default="help">
=======
<?xml version="1.0" encoding="UTF-8"?>  
<project name="Byread" default="debug">  
    <property environment="env" />   
    <!-- SDK Locations -->  
    <property name="sdk-folder" value="${env.ANDROID_SDK_HOME}/platforms/android-17" />  
    <property name="sdk-tools" value="${env.ANDROID_SDK_HOME}/build-tools/24.0.0" />  
    <property name="android-tools" value="${env.ANDROID_SDK_HOME}/platform-tools" />  
    <property name="proguardpath" location="${wtkhome}/lib/proguard" />  
  
    <condition property="exe" value=".exe" else=""><os family="windows" /></condition>
    <condition property="bat" value=".bat" else=""><os family="windows" /></condition>
    <property name="aapt" value="${sdk-tools}/aapt${exe}" />  
    <property name="aidl" value="${sdk-tools}/aidl${exe}" />  
    <property name="adb" value="${android-tools}/adb${exe}" />    
    <property name="jarsigner" value="${env.JAVA_HOME}/bin/jarsigner${exe}" />   
    <property name="dx" value="${sdk-tools}/dx${bat}" />  
    <property name="apk-builder" value="${android-tools}/apkbuilder${bat}" /> 
    <property name="proguard-home" value="${android-tools}/proguard/lib"/> 
    <property name="android-jar" value="${sdk-folder}/android.jar" /> 
>>>>>>> .r6082

<<<<<<< .mine
    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
=======
  
    <!-- Application Package Name -->  
    <property name="application-package" value="com.byread.reader" />  
    <property name="useragent" value="byAndroidWeb" />  
    <property name="version" value="1.02" />  
    <!-- The intermediates directory -->  
    <!-- Eclipse uses "bin" for its own output, so we do the same. -->  
    <property name="outdir-bin" value="bin" />  
    <property name="outdir-gen" value="gen" />  
    <!-- source directories -->  
    <property name="resource-dir" value="res" />  
    <property name="asset-dir" value="assets" />  
    <property name="srcdir" value="src" />  
    <property name="srcdir-ospath" value="${basedir}/${srcdir}" />  
    <property name="external-libs" value="libs" />  
    <property name="external-libs-ospath" value="${basedir}/${external-libs}" />  
  
    <!-- dest directories -->  
    <property name="des-resource-dir" value="${outdir-bin}/res" />  
    <property name="des-asset-dir" value="${outdir-bin}/assets" />  
    <property name="des-srcdir" value="${outdir-bin}/src" />  
    <property name="des-srcdir-ospath" value="${basedir}/${outdir-bin}/${srcdir}" />  
    <property name="des-external-libs" value="${outdir-bin}/libs" />  
    <property name="des-external-libs-ospath" value="${basedir}/${outdir-bin}/${external-libs}" />  
  
    <!-- Output directories -->  
    <property name="outdir-classes" value="${outdir-bin}/src" />  
    <property name="outdir-obfuscate-classes" value="${outdir-bin}/classes" />  
    <property name="outdir-obfuscate-classes-ospath" value="${basedir}/${outdir-obfuscate-classes}" />  
  
    <!-- Intermediate files -->  
    <property name="dex-file" value="classes.dex" />  
    <property name="intermediate-dex" value="${outdir-bin}/${dex-file}" />  
    <property name="intermediate-dex-ospath" value="${basedir}/${intermediate-dex}" />  
  
    <!-- The final package file to generate -->  
    <property name="resources-package" value="${outdir-bin}/${ant.project.name}" />  
    <property name="resources-package-ospath" value="${basedir}/${resources-package}" />  
    <property name="out-debug-package" value="${outdir-bin}/${ant.project.name}-debug.apk" />  
    <property name="out-debug-package-ospath" value="${basedir}/${out-debug-package}" />  
    <property name="out-unsigned-package" value="${outdir-bin}/${ant.project.name}-unsigned.apk" />  
    <property name="out-unsigned-package-ospath" value="${basedir}/${out-unsigned-package}" />  
    <property name="out-signed-package" value="${useragent}/${ant.project.name}.apk" />  
    <property name="out-signed-package-ospath" value="${basedir}/${out-signed-package}" />  
    <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>  
  
    <!-- init -->  
    <target name="init">  
        <echo>Creating all output directories </echo>  
        <delete dir="${outdir-bin}" />  
        <delete dir="${useragent}" />  
        <mkdir dir="${outdir-bin}" />  
        <mkdir dir="${outdir-classes}" />  
        <mkdir dir="${useragent}" />  
        <mkdir dir="${outdir-gen}" /> 
    </target>  
  
    <!-- copy original strings and modify useragent -->  
    <target name="copy" depends="init">  
        <echo>copy files to output folder</echo>  
        <delete file="${resource-dir}/values/strings.xml" />  
        <copy file="strings.xml" todir="${resource-dir}/values" />  
        <replace file="${resource-dir}/values/strings.xml" token="@USERAGENT@" value="${useragent}" encoding="utf-8" />  
    </target>  
  
    <!-- Generate the R.java file for this project's resources. -->  
    <target name="resource-src" depends="copy">  
        <echo>Generating R.java / Manifest.java from the resources...</echo>  
        <exec executable="${aapt}" failonerror="true">  
            <arg value="package" />  
            <arg value="-m" />  
            <arg value="-J" />  
            <arg value="${outdir-gen}" />  
            <arg value="-M" />  
            <arg value="AndroidManifest.xml" />  
            <arg value="-S" />  
            <arg value="${resource-dir}" />  
            <arg value="-I" />  
            <arg value="${android-jar}" />  
        </exec>  
    </target>  
  
    <!-- Generate java classes from .aidl files. -->  
    <target name="aidl" depends="copy">  
        <echo>Compiling aidl files into Java classes...</echo>  
        <apply executable="${aidl}" failonerror="true">  
            <arg value="-p${android-framework}" />  
            <arg value="-I${srcdir}" />  
            <fileset dir="${srcdir}">  
                <include name="**/*.aidl" />  
            </fileset>  
        </apply>  
    </target>  
  
    <!-- Compile this project's .java files into .class files. -->  
    <target name="compile" depends="copy, resource-src, aidl">  
        <javac encoding="UTF-8" source="1.6" target="1.6" debug="true" extdirs="" srcdir="." destdir="${outdir-classes}" bootclasspath="${android-jar}">  
            <classpath>  
                <fileset dir="${external-libs}" includes="*.jar" />  
            </classpath>  
        </javac>  
    </target>  
  
  
  
  
    <!-- Convert this project's .class files into .dex files. -->  
    <target name="dex" depends="compile">  
        <echo>Converting compiled files and external libraries into ${outdir}/${dex-file}...</echo>  
        <apply executable="${dx}" failonerror="true" parallel="true" >  
            <arg value="--dex" />  
            <arg value="--output=${intermediate-dex-ospath}" />  
            <arg path="${outdir-obfuscate-classes-ospath}" />  
            <fileset dir="${external-libs}" includes="*.jar" />  
        </apply>  
    </target>  
  
    <!-- Put the project's resources into the output package file. -->  
    <target name="package-res-and-assets">  
        <echo>Packaging resources and assets...</echo>  
        <exec executable="${aapt}" failonerror="true">  
            <arg value="package" />  
            <arg value="-f" />  
            <arg value="-M" />  
            <arg value="AndroidManifest.xml" />  
            <arg value="-S" />  
            <arg value="${resource-dir}" />  
            <arg value="-A" />  
            <arg value="${asset-dir}" />  
            <arg value="-I" />  
            <arg value="${android-jar}" />  
            <arg value="-F" />  
            <arg value="${resources-package}" />  
        </exec>  
    </target>  
  
    <!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->  
    <target name="package-res-no-assets">  
        <echo>Packaging resources...</echo>  
        <exec executable="${aapt}" failonerror="true">  
            <arg value="package" />  
            <arg value="-f" />  
            <arg value="-M" />  
            <arg value="AndroidManifest.xml" />  
            <arg value="-S" />  
            <arg value="${resource-dir}" />  
            <!-- No assets directory -->  
            <arg value="-I" />  
            <arg value="${android-jar}" />  
            <arg value="-F" />  
            <arg value="${resources-package}" />  
        </exec>  
    </target>  
  
    <!-- Invoke the proper target depending on whether or not  
                 an assets directory is present. -->  
    <!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument  
                 only when the assets dir exists. -->  
    <target name="package-res">  
        <available file="${asset-dir}" type="dir" property="res-target" value="and-assets" />  
        <property name="res-target" value="no-assets" />  
        <antcall target="package-res-${res-target}" />  
    </target>  
  
    <!-- Package the application and sign it with a debug key.  
                 This is the default target when building. It is used for debug. -->  
    <target name="debug" depends="dex, package-res">  
        <echo>Packaging ${out-debug-package}, and signing it with a debug key...</echo>  
        <exec executable="${apk-builder}" failonerror="true">  
            <arg value="${out-debug-package-ospath}" />  
            <arg value="-z" />  
            <arg value="${resources-package-ospath}" />  
            <arg value="-f" />  
            <arg value="${intermediate-dex-ospath}" />  
            <arg value="-rf" />  
            <arg value="${srcdir-ospath}" />  
            <arg value="-rj" />  
            <arg value="${external-libs-ospath}" />  
        </exec>  
    </target>  
  
    <!-- Package the application without signing it.  
                 This allows for the application to be signed later with an official publishing key. -->  
    <target name="package" depends="dex, package-res">  
        <echo>Packaging ${out-unsigned-package} for release...</echo>  
        <exec executable="${apk-builder}" failonerror="true">  
            <arg value="${out-unsigned-package-ospath}" />  
            <arg value="-u" />  
            <arg value="-z" />  
            <arg value="${resources-package-ospath}" />  
            <arg value="-f" />  
            <arg value="${intermediate-dex-ospath}" />  
            <arg value="-rf" />  
            <arg value="${srcdir-ospath}" />  
            <arg value="-rj" />  
            <arg value="${external-libs-ospath}" />  
        </exec>  
        <echo>It will need to be signed with jarsigner before being published.</echo>  
    </target>  
  
    <target name="jarsigner" depends="package">  
        <echo>Packaging ${out-unsigned-package} for release...</echo>  
        <exec executable="${jarsigner}" failonerror="true">  
            <arg value="-verbose" />  
            <arg value="-storepass" />  
            <arg value="byread002" />  
            <arg value="-keypass" />  
            <arg value="byread002" />  
            <arg value="-keystore" />  
            <arg value="bbyread.keystore" />  
            <arg value="-signedjar" />  
            <arg value="${out-signed-package-ospath}" />  
            <arg value="${out-unsigned-package-ospath}" />  
            <arg value="byread" />  
        </exec>  
    </target>  
  
    <target name="release" depends="jarsigner">  
        <echo>release for release...</echo>  
    </target>  
  
    <!-- Install the package on the default emulator -->  
    <target name="install" depends="debug">  
        <echo>Installing ${out-debug-package} onto default emulator...</echo>  
        <exec executable="${adb}" failonerror="true">  
            <arg value="install" />  
            <arg value="${out-debug-package}" />  
        </exec>  
    </target>  
  
    <target name="reinstall" depends="debug">  
        <echo>Installing ${out-debug-package} onto default emulator...</echo>  
        <exec executable="${adb}" failonerror="true">  
            <arg value="install" />  
            <arg value="-r" />  
            <arg value="${out-debug-package}" />  
        </exec>  
    </target>  
  
    <!-- Uinstall the package from the default emulator -->  
    <target name="uninstall">  
        <echo>Uninstalling ${application-package} from the default emulator...</echo>  
        <exec executable="${adb}" failonerror="true">  
            <arg value="uninstall" />  
            <arg value="${application-package}" />  
        </exec>  
    </target>  
  
</project>  >>>>>>> .r6082
